import { useQuery } from '@tanstack/react-query';
import { useEffect, useMemo, useRef, useState } from 'react';
import { FaBalanceScale, FaPaperPlane, FaTimes, FaUser, FaVolumeUp } from 'react-icons/fa';
import { chatWithGemini, getChatHistory } from '../../services/chat';
import { formatDateChatBot, getDateKey } from '../../utils/index';
import { quickOptions } from './constants/index';

export const formatMarkdown = (text) => {
  const parts = text.split(/(\*\*[^*]+\*\*)/g);

  return parts.map((part, index) => {
    if (part.startsWith('**') && part.endsWith('**')) {
      const content = part.slice(2, -2);
      return <strong key={index}>{content}</strong>;
    }
    return <span key={index}>{part}</span>;
  });
};

const ChatBot = ({ onClose }) => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isVoiceChatMode, setIsVoiceChatMode] = useState(false); // Track voice chat mode
  const recognitionRef = useRef(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showAnimation, setShowAnimation] = useState(true);
  const [isTyping, setIsTyping] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const [hasUserSentMessage, setHasUserSentMessage] = useState(false);
  // ref cho container chat v√† textarea ƒë·ªÉ x·ª≠ l√Ω scroll v√† focus input
  const chatContainerRef = useRef(null);
  const textareaRef = useRef(null);
  const [audioUrl, setAudioUrl] = useState(null); // url audio ƒëang ph√°t
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentPlayingMessageText, setCurrentPlayingMessageText] = useState(null); // Track tin nh·∫Øn n√†o ƒëang ph√°t audio
  const audioRef = useRef(null); // ref cho audio element
  const webAudioActiveRef = useRef(false); // flag ƒë·ªÉ ngƒÉn multiple Web Audio API calls
  const webAudioSourceRef = useRef(null); // ref cho Web Audio API source ƒë·ªÉ c√≥ th·ªÉ d·ª´ng

  // Viettel AI TTS Configuration
  const VIETTEL_TTS_CONFIG = {
    url: 'https://viettelai.vn/tts/speech_synthesis',
    token: 'df7e2feb9fb27090083dadcb79db543f',
    voice: 'hn-quynhanh', // Gi·ªçng n·ªØ mi·ªÅn B·∫Øc - Qu·ª≥nh Anh
    speed: 1.0,
    tts_return_option: 3, // MP3 format
    without_filter: false
  };

  const userId = localStorage.getItem('userId');

  // l·∫•y l·ªãch s·ª≠ chat
  const { data: messagesList } = useQuery({
    queryKey: ['chatHistory', userId],
    queryFn: () => getChatHistory(userId),
    enabled: !!userId,
    refetchOnMount: false,
    refetchOnWindowFocus: false,
    refetchInterval: false,
    retry: 3,
  });

  const listMessage = (messagesList && messagesList.data) || [];

  // convert danh s√°ch tin nh·∫Øn th√†nh d·∫°ng data ƒë·ªÉ map (theo ng√†y, ph√¢n bi·ªát ng∆∞·ªùi g·ª≠i (bot/user))
  const transformedMessages = useMemo(() => {
    const groupedMessages = [];
    let lastDateKey = null;

    // s·∫Øp x·∫øp tin nh·∫Øn theo th·ªùi gian
    const sortedMessages = [...listMessage].sort(
      (a, b) => new Date(a.timestamp) - new Date(b.timestamp),
    );

    sortedMessages.forEach((msg) => {
      const dateKey = getDateKey(msg.timestamp);
      const time = new Date(msg.timestamp).toLocaleTimeString('vi-VN', {
        hour: '2-digit',
        minute: '2-digit',
      });

      // Th√™m separator ng√†y n·∫øu kh√°c ng√†y
      if (dateKey !== lastDateKey) {
        groupedMessages.push({
          type: 'date',
          date: formatDateChatBot(msg.timestamp),
          timestamp: msg.timestamp,
        });
        lastDateKey = dateKey;
      }

      // tin nh·∫Øn user
      groupedMessages.push({
        type: 'message',
        sender: 'me',
        text: msg.question,
        time,
        timestamp: msg.timestamp,
      });

      // tin nh·∫Øn bot
      groupedMessages.push({
        type: 'message',
        sender: 'other',
        text: msg.answer,
        time,
        timestamp: msg.timestamp,
      });
    });

    return groupedMessages;
  }, [listMessage]);

  // focus v√†o textarea nh·∫≠p tin nh·∫Øn
  const focusTextarea = () => {
    if (textareaRef.current) {
      textareaRef.current.focus();
    }
  };

  // H√†m Text-to-Speech s·ª≠ d·ª•ng Viettel AI TTS API (ch·∫•t l∆∞·ª£ng cao)
  const speakWithViettelTTS = async (text) => {
    try {
      // Ki·ªÉm tra ƒë·ªô d√†i text
      if (text.length > 2000) {
        text = text.substring(0, 2000);
      }
      
      // Ki·ªÉm tra text √≠t nh·∫•t 3 k√Ω t·ª±
      if (text.length < 3) {
        alert('N·ªôi dung qu√° ng·∫Øn ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh gi·ªçng n√≥i');
        return;
      }

      // D·ª´ng audio ƒëang ph√°t (n·∫øu c√≥)
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
      }

      // Reset Web Audio API flag
      webAudioActiveRef.current = false;
      webAudioSourceRef.current = null;

      // Thi·∫øt l·∫≠p tr·∫°ng th√°i ƒëang loading
      setIsPlaying(true);
      setAudioUrl('loading');
      setCurrentPlayingMessageText(text); // Track tin nh·∫Øn ƒëang ph√°t

      console.log('ƒêang g·ªçi Viettel TTS API v·ªõi text:', text.substring(0, 50) + '...');

      // G·ªçi Viettel AI TTS API
      const response = await fetch(VIETTEL_TTS_CONFIG.url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'accept': '*/*'
        },
        body: JSON.stringify({
          text: text,
          voice: VIETTEL_TTS_CONFIG.voice,
          speed: VIETTEL_TTS_CONFIG.speed,
          tts_return_option: VIETTEL_TTS_CONFIG.tts_return_option,
          token: VIETTEL_TTS_CONFIG.token,
          without_filter: VIETTEL_TTS_CONFIG.without_filter
        })
      });

      console.log('Viettel TTS Response Status:', response.status);
      console.log('Viettel TTS Response Headers:', response.headers);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.vi_message || errorData.en_message || 'L·ªói API Viettel TTS');
      }

      // Ki·ªÉm tra content-type
      const contentType = response.headers.get('content-type');
      console.log('Content-Type:', contentType);

      // T·∫°o audio t·ª´ response blob
      const audioBlob = await response.blob();
      console.log('Audio Blob size:', audioBlob.size, 'bytes');
      console.log('Audio Blob type:', audioBlob.type);
      
      if (audioBlob.size === 0) {
        throw new Error('File audio r·ªóng t·ª´ Viettel TTS');
      }

      const audioUrl = URL.createObjectURL(audioBlob);
      console.log('Audio URL ƒë√£ t·∫°o:', audioUrl);
      
      // T·∫°o audio element v√† ph√°t
      const audio = new Audio(audioUrl);
      audioRef.current = audio;
      
      // Thi·∫øt l·∫≠p volume v√† preload
      audio.volume = 1.0;
      audio.preload = 'auto';
      audio.muted = false; // ƒê·∫£m b·∫£o kh√¥ng b·ªã mute
      
      // Ki·ªÉm tra Audio Context (Chrome policy)
      if (typeof AudioContext !== 'undefined' || typeof window.webkitAudioContext !== 'undefined') {
        const AudioContextClass = AudioContext || window.webkitAudioContext;
        const audioContext = new AudioContextClass();
        
        if (audioContext.state === 'suspended') {
          console.log('üîä Audio Context suspended, trying to resume...');
          try {
            await audioContext.resume();
            console.log('‚úÖ Audio Context resumed successfully');
          } catch (e) {
            console.warn('‚ö†Ô∏è Could not resume Audio Context:', e);
          }
        }
      }
      
      audio.onloadstart = () => {
        console.log('‚úÖ Audio loadstart - ƒêang t·∫£i audio t·ª´ Viettel TTS...');
      };

      audio.onloadedmetadata = () => {
        console.log('‚úÖ Audio loadedmetadata - Metadata ƒë√£ load');
        console.log('‚è±Ô∏è Audio duration after metadata:', audio.duration);
        console.log('üîä Audio volume after metadata:', audio.volume);
        
        // N·∫øu duration v·∫´n l√† NaN, c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ v·ªõi file
        if (isNaN(audio.duration)) {
          console.warn('‚ö†Ô∏è Audio duration l√† NaN - c√≥ v·∫•n ƒë·ªÅ v·ªõi file MP3');
          // Th·ª≠ set l·∫°i volume v√† muted
          audio.volume = 1.0;
          audio.muted = false;
        }
      };

      audio.onloadeddata = () => {
        console.log('‚úÖ Audio loadeddata - D·ªØ li·ªáu audio ƒë√£ load');
      };
      
      audio.oncanplay = () => {
        console.log('‚úÖ Audio canplay - S·∫µn s√†ng ph√°t audio');
        setAudioUrl(audioUrl);
      };

      audio.oncanplaythrough = () => {
        console.log('‚úÖ Audio canplaythrough - C√≥ th·ªÉ ph√°t li√™n t·ª•c');
      };
      
      audio.onplay = () => {
        console.log('‚úÖ Audio play - B·∫Øt ƒë·∫ßu ph√°t audio Viettel TTS');
        console.log('üîä Audio volume:', audio.volume);
        console.log('üîá Audio muted:', audio.muted);
        console.log('‚è±Ô∏è Audio duration:', audio.duration);
        console.log('üìç Audio currentTime:', audio.currentTime);
        setIsPlaying(true);
      };

      audio.onplaying = () => {
        console.log('‚úÖ Audio playing - ƒêang ph√°t audio');
        let resumeAttempted = false; // Flag ƒë·ªÉ tr√°nh double fallback
        
        // Th√™m test ƒë·ªÉ ƒë·∫£m b·∫£o audio th·ª±c s·ª± ph√°t
        setTimeout(() => {
          console.log('‚è∞ Audio currentTime after 1s:', audio.currentTime);
          console.log('‚è∞ Audio duration after 1s:', audio.duration);
          console.log('‚è∞ Audio paused after 1s:', audio.paused);
          console.log('‚è∞ Audio readyState after 1s:', audio.readyState);
          console.log('‚è∞ Audio ended after 1s:', audio.ended);
          console.log('üîÑ Web Audio API active:', webAudioActiveRef.current);
          
          // Ch·ªâ x·ª≠ l√Ω n·∫øu Web Audio API ch∆∞a active
          if (!webAudioActiveRef.current && audio.paused && !audio.ended && !resumeAttempted) {
            console.warn('‚ö†Ô∏è Audio b·ªã pause t·ª± ƒë·ªông! Th·ª≠ play l·∫°i...');
            resumeAttempted = true;
            
            // Th·ª≠ play l·∫°i ngay l·∫≠p t·ª©c
            audio.play().then(() => {
              console.log('‚úÖ Audio resumed successfully');
              // N·∫øu resume th√†nh c√¥ng, CANCEL Web Audio API n·∫øu ƒëang pending
              if (webAudioActiveRef.current) {
                console.log('üö´ Cancelling Web Audio API v√¨ HTML Audio ƒë√£ resume th√†nh c√¥ng');
                webAudioActiveRef.current = false;
              }
            }).catch(e => {
              console.error('‚ùå Resume failed:', e);
              console.log('üîÑ Chuy·ªÉn sang Web Audio API t·ª´ onplaying...');
              
              // Ki·ªÉm tra l·∫°i flag tr∆∞·ªõc khi g·ªçi Web Audio API
              if (!webAudioActiveRef.current) {
                webAudioActiveRef.current = true;
                
                // D·ª´ng HTML audio ho√†n to√†n tr∆∞·ªõc khi d√πng Web Audio API
                audio.pause();
                audio.currentTime = 0;
                
                // Chuy·ªÉn sang Web Audio API
                setTimeout(async () => {
                  // Double-check flag tr∆∞·ªõc khi th·ª±c thi Web Audio API
                  if (!webAudioActiveRef.current) {
                    console.log('üö´ HTML Audio ƒë√£ resume, b·ªè qua Web Audio API');
                    return;
                  }
                  
                  try {
                    await playWithWebAudioAPI(audioBlob);
                  } catch (webAudioError) {
                    console.error('‚ùå Web Audio API c≈©ng th·∫•t b·∫°i:', webAudioError);
                    alert('Kh√¥ng th·ªÉ ph√°t audio. C√≥ th·ªÉ do:\n1. Browser policy ch·∫∑n audio\n2. Audio focus b·ªã m·∫•t\n3. Conflict v·ªõi audio kh√°c');
                  }
                }, 200); // TƒÉng delay ƒë·ªÉ cho HTML Audio c√≥ c∆° h·ªôi resume
              } else {
                console.log('üö´ Web Audio API ƒë√£ active, b·ªè qua...');
              }
            });
          } else if (!webAudioActiveRef.current && audio.currentTime === 0 && !audio.paused && !audio.ended && !resumeAttempted) {
            console.warn('‚ö†Ô∏è Audio kh√¥ng di chuy·ªÉn! C√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ v·ªõi audio output');
            console.log('üîÑ Th·ª≠ ph∆∞∆°ng ph√°p kh√°c...');
            resumeAttempted = true;
            
            // Th·ª≠ pause r·ªìi play l·∫°i
            audio.pause();
            setTimeout(() => {
              audio.currentTime = 0;
              audio.play().catch(e => console.error('‚ùå Retry play failed:', e));
            }, 100);
          }
        }, 1000);
        
        // B·ªè check sau 2s ƒë·ªÉ tr√°nh double fallback
        // setTimeout async ƒë√£ ƒë∆∞·ª£c b·ªè ƒë·ªÉ tr√°nh conflict
      };
      
      audio.onpause = () => {
        console.log('‚è∏Ô∏è Audio paused - Audio b·ªã d·ª´ng');
        console.log('‚è∏Ô∏è Audio currentTime when paused:', audio.currentTime);
        console.log('‚è∏Ô∏è Audio ended when paused:', audio.ended);
        
        // N·∫øu audio b·ªã pause m√† ch∆∞a ended v√† currentTime > 0, c√≥ th·ªÉ do browser policy
        if (!audio.ended && audio.currentTime < audio.duration * 0.1) {
          console.warn('‚ö†Ô∏è Audio b·ªã pause qu√° s·ªõm - c√≥ th·ªÉ do browser policy');
        }
      };

      audio.onended = () => {
        console.log('‚úÖ Audio ended - K·∫øt th√∫c ph√°t audio');
        setIsPlaying(false);
        setAudioUrl(null);
        setCurrentPlayingMessageText(null); // Clear tracking
        URL.revokeObjectURL(audioUrl); // Cleanup
      };
      
      audio.onerror = (error) => {
        console.error('‚ùå Audio error:', error);
        console.error('‚ùå Audio error details:', audio.error);
        alert('L·ªói ph√°t audio. C√≥ th·ªÉ do tr√¨nh duy·ªát ch·∫∑n autoplay ho·∫∑c file audio l·ªói.');
        setIsPlaying(false);
        setAudioUrl(null);
        setCurrentPlayingMessageText(null); // Clear tracking
        URL.revokeObjectURL(audioUrl);
      };

      // Th·ª≠ ph√°t audio v·ªõi x·ª≠ l√Ω autoplay policy
      try {
        console.log('üéµ ƒêang th·ª≠ ph√°t audio...');
        const playPromise = audio.play();
        if (playPromise !== undefined) {
          await playPromise;
          console.log('‚úÖ Audio ƒë√£ ph√°t th√†nh c√¥ng');
          
          // Ki·ªÉm tra ngay sau khi play xem c√≥ b·ªã pause kh√¥ng - nh∆∞ng kh√¥ng trigger Web Audio API ngay
          setTimeout(() => {
            if (audio.paused && !audio.ended && !webAudioActiveRef.current) {
              console.warn('‚ö†Ô∏è Audio b·ªã pause ngay sau khi play! Chuy·ªÉn sang Web Audio API...');
              webAudioActiveRef.current = true;
              
              // D·ª´ng HTML audio ho√†n to√†n
              audio.pause();
              audio.currentTime = 0;
              
              playWithWebAudioAPI(audioBlob).catch(e => {
                console.error('‚ùå Emergency Web Audio API failed:', e);
              });
            } else if (audio.paused && !audio.ended && webAudioActiveRef.current) {
              console.log('üö´ Audio paused nh∆∞ng Web Audio API ƒë√£ active, b·ªè qua...');
            }
          }, 100);
        }
      } catch (playError) {
        console.error('‚ùå L·ªói autoplay:', playError);
        
        // N·∫øu b·ªã ch·∫∑n autoplay, th·ª≠ Web Audio API ngay l·∫≠p t·ª©c
        if (playError.name === 'NotAllowedError') {
          console.log('üîÑ AutoPlay b·ªã ch·∫∑n, th·ª≠ Web Audio API ngay...');
          webAudioActiveRef.current = true;
          try {
            await playWithWebAudioAPI(audioBlob);
          } catch (webAudioError) {
            console.error('‚ùå Web Audio API backup failed:', webAudioError);
            alert('Tr√¨nh duy·ªát ch·∫∑n t·ª± ƒë·ªông ph√°t audio. Vui l√≤ng click v√†o trang web tr∆∞·ªõc r·ªìi th·ª≠ l·∫°i.');
          }
        } else {
          console.log('üîÑ Play error, trying Web Audio API...');
          webAudioActiveRef.current = true;
          try {
            await playWithWebAudioAPI(audioBlob);
          } catch (webAudioError) {
            console.error('‚ùå Web Audio API backup failed:', webAudioError);
            alert(`L·ªói ph√°t audio: ${playError.message}`);
          }
        }
        
        setIsPlaying(false);
        setAudioUrl(null);
        setCurrentPlayingMessageText(null); // Clear tracking
        URL.revokeObjectURL(audioUrl);
      }

    } catch (err) {
      console.error('‚ùå Viettel TTS Error:', err);
      alert(`L·ªói Viettel TTS: ${err.message || 'Vui l√≤ng th·ª≠ l·∫°i.'}`);
      setIsPlaying(false);
      setAudioUrl(null);
      setCurrentPlayingMessageText(null); // Clear tracking
    }
  };

  // Fallback method s·ª≠ d·ª•ng Web Audio API
  const playWithWebAudioAPI = async (audioBlob) => {
    try {
      console.log('üéµ B·∫Øt ƒë·∫ßu Web Audio API playback...');
      
      // Set flag ƒë·ªÉ ngƒÉn multiple calls
      webAudioActiveRef.current = true;
      
      // D·ª´ng ho√†n to√†n HTML Audio element ƒë·ªÉ tr√°nh conflict
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current = null; // Lo·∫°i b·ªè reference
      }
      
      const AudioContextClass = AudioContext || window.webkitAudioContext;
      const audioContext = new AudioContextClass();
      
      console.log('üîä AudioContext state:', audioContext.state);
      
      if (audioContext.state === 'suspended') {
        console.log('üîä Resuming AudioContext...');
        await audioContext.resume();
      }
      
      console.log('üìä Decoding audio data...');
      const arrayBuffer = await audioBlob.arrayBuffer();
      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
      
      console.log('‚úÖ Audio decoded successfully');
      console.log('‚è±Ô∏è Audio buffer duration:', audioBuffer.duration);
      console.log('üì¢ Audio buffer channels:', audioBuffer.numberOfChannels);
      console.log('üîä Audio buffer sample rate:', audioBuffer.sampleRate);
      
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      
      // L∆∞u reference ƒë·ªÉ c√≥ th·ªÉ d·ª´ng t·ª´ b√™n ngo√†i
      webAudioSourceRef.current = source;
      
      // Th√™m gain node ƒë·ªÉ control volume
      const gainNode = audioContext.createGain();
      gainNode.gain.value = 1.0;
      
      source.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      source.onended = () => {
        console.log('‚úÖ Web Audio API playback ended');
        setIsPlaying(false);
        setAudioUrl(null);
        setCurrentPlayingMessageText(null); // Clear tracking
        webAudioActiveRef.current = false; // Reset flag khi k·∫øt th√∫c
        webAudioSourceRef.current = null; // Clear reference
        audioContext.close();
      };
      
      source.start(0);
      console.log('‚úÖ Web Audio API started successfully');
      
      // Update UI
      setIsPlaying(true);
      setAudioUrl('web-audio-api');
      
    } catch (error) {
      console.error('‚ùå Web Audio API error:', error);
      console.error('‚ùå Error details:', error.message);
      webAudioActiveRef.current = false; // Reset flag khi l·ªói
      webAudioSourceRef.current = null; // Clear reference
      throw error;
    }
  };  // X·ª≠ l√Ω audio element lifecycle
  useEffect(() => {
    // Cleanup function khi component unmount
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }
      if (audioUrl && audioUrl !== 'loading') {
        URL.revokeObjectURL(audioUrl);
      }
    };
  }, [audioUrl]);

  // H√†m d·ª´ng ph√°t audio
  const handleStopAudio = () => {
    console.log('üõë D·ª´ng t·∫•t c·∫£ audio...');
    
    // D·ª´ng HTML Audio
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      console.log('üõë HTML Audio ƒë√£ d·ª´ng');
    }
    
    // D·ª´ng Web Audio API
    if (webAudioSourceRef.current) {
      try {
        webAudioSourceRef.current.stop();
        webAudioSourceRef.current = null;
        console.log('üõë Web Audio API ƒë√£ d·ª´ng');
      } catch (e) {
        console.warn('‚ö†Ô∏è Web Audio API ƒë√£ k·∫øt th√∫c ho·∫∑c kh√¥ng th·ªÉ d·ª´ng:', e);
      }
    }
    
    // Reset states
    webAudioActiveRef.current = false;
    setIsPlaying(false);
    setAudioUrl(null);
    setCurrentPlayingMessageText(null); // Clear tracking
  };

  // Voice recognition
  const handleVoiceClick = () => {
    if (!('webkitSpeechRecognition' in window)) {
      alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i.');
      return;
    }
    if (isListening) {
      recognitionRef.current?.stop();
      setIsListening(false);
      return;
    }
    const recognition = new window.webkitSpeechRecognition();
    recognition.lang = 'vi-VN';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onstart = () => {
      setIsListening(true);
    };
    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setInput(transcript);
      setIsListening(false);
      
      // ƒê√°nh d·∫•u ƒëang trong Voice Chat mode
      setIsVoiceChatMode(true);
      
      console.log('üé§ Voice Chat detected:', transcript);
      
      // T·ª± ƒë·ªông g·ª≠i tin nh·∫Øn sau khi nh·∫≠n di·ªán xong (v·ªõi flag autoRead)
      setTimeout(() => {
        handleSend(transcript, true); // true = autoRead
        setInput(''); // Clear input sau khi g·ª≠i
      }, 500); // Delay nh·ªè ƒë·ªÉ user th·∫•y text tr∆∞·ªõc khi g·ª≠i
    };
    recognition.onerror = () => {
      setIsListening(false);
    };
    recognition.onend = () => {
      setIsListening(false);
    };
    recognitionRef.current = recognition;
    recognition.start();
  };

  // scoll xu·ªëng cu·ªëi khung chat
  const scrollToBottom = (force = false) => {
    if (chatContainerRef.current) {
      const scrollHeight = chatContainerRef.current.scrollHeight;
      const clientHeight = chatContainerRef.current.clientHeight;
      const scrollTop = chatContainerRef.current.scrollTop;

      if (force || scrollHeight - scrollTop - clientHeight < 100) {
        chatContainerRef.current.scrollTo({
          top: scrollHeight,
          behavior: 'smooth',
        });
      }
    }
  };

  // c·∫≠p nh·∫≠t tin nh·∫Øn khi c√≥ d·ªØ li·ªáu m·ªõi ho·∫∑c kh·ªüi t·∫°o l·∫ßn ƒë·∫ßu
  useEffect(() => {
    if (listMessage.length > 0) {
      const newMessages = transformedMessages;

      const isDifferent =
        newMessages.length !== messages.length ||
        newMessages.some((msg, i) => msg.timestamp !== messages[i]?.timestamp);

      if (isDifferent) {
        setMessages(newMessages);
        const hasUserMessage = transformedMessages.some(
          (msg) => msg.type === 'message' && msg.sender === 'me',
        );
        if (hasUserMessage) {
          setHasUserSentMessage(true);
        }

        if (!isInitialized) {
          setIsInitialized(true);
          setTimeout(() => {
            scrollToBottom(true);
            focusTextarea();
          }, 100);
        }
      }
    } else if (messages.length === 0) {
      // tin nh·∫Øn m·ªõi v√†o khi ch∆∞a c√≥ l·ªãch s·ª≠ chat
      const initialMessage = {
        type: 'message',
        sender: 'other',
        text: 'Xin ch√†o! T√¥i l√† SmartLaw AI - Tr·ª£ l√Ω t∆∞ v·∫•n ph√°p lu·∫≠t th√¥ng minh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c v·∫•n ƒë·ªÅ v·ªÅ lu·∫≠t giao th√¥ng, d√¢n s·ª±, h√¨nh s·ª±, lao ƒë·ªông v√† nhi·ªÅu lƒ©nh v·ª±c kh√°c. B·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ v·∫•n ƒë·ªÅ g√¨?',
        time: new Date().toLocaleTimeString('vi-VN', {
          hour: '2-digit',
          minute: '2-digit',
        }),
        timestamp: new Date().toISOString(),
      };

      setMessages([initialMessage]);
      setIsInitialized(true);
      setTimeout(() => {
        scrollToBottom(true);
        focusTextarea();
      }, 100);
    }
  }, [listMessage, transformedMessages]);

  // t·ª± ƒë·ªông cu·ªôn xu·ªëng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (isInitialized && messages.length > 0) {
      setTimeout(() => scrollToBottom(true), 50);
    }
  }, [messages, isInitialized]);

  // hi·ªÉn th·ªã animation khi m·ªü chat bot
  useEffect(() => {
    setShowAnimation(true);
    const timer = setTimeout(() => {
      setShowAnimation(false);
      focusTextarea();
    }, 600);
    return () => clearTimeout(timer);
  }, []);

  // t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao textarea khi nh·∫≠p
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height =
        Math.min(textareaRef.current.scrollHeight, 120) + 'px';
    }
  }, [input]);

  // x·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSend = async (message = input, autoRead = false) => {
    if (!message.trim() || isLoading) return;

    // ƒë√°nh d·∫•u r·∫±ng ng∆∞·ªùi d√πng ƒë√£ g·ª≠i √≠t nh·∫•t m·ªôt tin nh·∫Øn
    setHasUserSentMessage(true);

    const now = new Date();
    const time = now.toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit',
    });

    // l·∫•y tin nh·∫Øn cu·ªëi c√πng trong danh s√°ch tin nh·∫Øn
    const lastMessage = messages[messages.length - 1];

    // x√°c ƒë·ªãnh xem c√≥ c·∫ßn hi·ªÉn th·ªã d·∫£i ph√¢n c√°ch ng√†y m·ªõi hay kh√¥ng
    const needDateSeparator =
      lastMessage &&
      getDateKey(now.toISOString()) !== getDateKey(lastMessage.timestamp);

    // t·∫°o m·∫£ng tin nh·∫Øn m·ªõi d·ª±a tr√™n tin nh·∫Øn hi·ªán t·∫°i
    const newMessages = [...messages];

    // n·∫øu c·∫ßn d·∫£i ph√¢n c√°ch ng√†y th√¨ th√™m v√†o (H√¥m nay / H√¥m qua / Ng√†y kh√°c)
    if (needDateSeparator) {
      newMessages.push({
        type: 'date',
        date: formatDateChatBot(now.toISOString()),
        timestamp: now.toISOString(),
      });
    }

    // th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o danh s√°ch
    newMessages.push({
      type: 'message',
      sender: 'me',
      text: message.trim(),
      time,
      timestamp: now.toISOString(),
    });

    // c·∫≠p nh·∫≠t danh s√°ch tin nh·∫Øn v√† reset input
    setMessages(newMessages);
    setInput('');
    setIsLoading(true);
    setIsTyping(true);

    // focus l·∫°i v√†o khung nh·∫≠p tin nh·∫Øn sau khi g·ª≠i
    setTimeout(() => {
      focusTextarea();
    }, 10);

    try {
      // g·ªçi API ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi t·ª´ chatbot
      const res = await chatWithGemini(message.trim(), userId);

      // fake delay
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // l·∫•y n·ªôi dung ph·∫£n h·ªìi
      const answer =
        res?.data?.answer ||
        res?.data ||
        'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng';

      setIsTyping(false);

      // th√™m ph·∫£n h·ªìi t·ª´ chatbot v√†o danh s√°ch tin nh·∫Øn
      setMessages((prev) => [
        ...prev,
        {
          type: 'message',
          sender: 'other',
          text: answer,
          time: new Date().toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit',
          }),
          timestamp: new Date().toISOString(),
        },
      ]);

      setTimeout(() => {
        focusTextarea();
      }, 100);
      
      // N·∫øu autoRead (t·ª´ voice input), t·ª± ƒë·ªông ƒë·ªçc tr·∫£ l·ªùi
      if (autoRead) {
        console.log('üîä Voice Chat: T·ª± ƒë·ªông ph√°t audio tr·∫£ l·ªùi...');
        setTimeout(() => {
          speakWithViettelTTS(answer);
        }, 300); // Delay nh·ªè ƒë·ªÉ UI update xong
        
        // Reset voice chat mode sau khi x·ª≠ l√Ω xong
        setTimeout(() => {
          setIsVoiceChatMode(false);
        }, 1000);
      }
    } catch {
      setIsTyping(false);
      
      // Reset voice chat mode n·∫øu c√≥ l·ªói
      if (autoRead) {
        setIsVoiceChatMode(false);
      }
      
      // th√™m tin nh·∫Øn b√°o l·ªói v√†o danh s√°ch (n·∫øu c·∫ßn)
      setMessages((prev) => [
        ...prev,
        {
          type: 'message',
          sender: 'other',
          text: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.',
          time: new Date().toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit',
          }),
          timestamp: new Date().toISOString(),
        },
      ]);

      setTimeout(() => {
        focusTextarea();
      }, 100);
    } finally {
      setIsLoading(false);
    }
  };

  // h·ªó tr·ª£ ch·ªçn c√¢u h·ªèi nhanh
  const handleQuickOption = (option) => {
    handleSend(option.query);
  };

  // x·ª≠ l√Ω g·ª≠i tin nh·∫Øn khi nh·∫•n Enter (kh√¥ng gi·ªØ shift)
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  // khi click v√†o v√πng chat th√¨ focus v√†o textarea n·∫øu kh√¥ng loading
  const handleChatContainerClick = () => {
    if (!isLoading) {
      focusTextarea();
    }
  };

  // hi·ªÉn th·ªã c√°c c√¢u h·ªèi nhanh n·∫øu ch∆∞a g·ª≠i tin nh·∫Øn n√†o
  const showQuickOptions = !hasUserSentMessage;

  return (
    <div className="w-full h-full max-w-4xl mx-auto">
      <div
        className={`bg-white rounded-none sm:rounded-3xl shadow-2xl w-full h-full flex flex-col overflow-hidden border-0 ${
          showAnimation ? 'animate-pulse' : ''
        }`}
      >
        {/* Dropdown ch·ªçn voice ti·∫øng Vi·ªát */}
        {/* Xo√° ƒëo·∫°n n√†y:
        <div className="px-6 pt-4 pb-2 bg-white border-b border-gray-100 flex items-center gap-2">
          <span className="text-xs text-gray-500">Ch·ªçn gi·ªçng ƒë·ªçc:</span>
          <select
            className="text-xs border rounded px-2 py-1 focus:outline-none"
            value={selectedVoice?.voiceURI || ''}
            onChange={e => {
              const v = voices.find(v => v.voiceURI === e.target.value);
              setSelectedVoice(v);
            }}
          >
            {vietnameseVoices.length > 0 ? (
              vietnameseVoices.map(v => (
                <option key={v.voiceURI} value={v.voiceURI}>
                  {v.name} ({v.lang})
                </option>
              ))
            ) : (
              voices.map(v => (
                <option key={v.voiceURI} value={v.voiceURI}>
                  {v.name} ({v.lang})
                </option>
              ))
            )}
          </select>
          {vietnameseVoices.length === 0 && (
            <span className="text-xs text-red-400 ml-2">Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát tr√™n m√°y b·∫°n</span>
          )}
        </div>
        */}
        <div className="relative bg-blue-700 p-6">
          <div className="relative flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="relative">
                <div className="w-12 h-12 bg-white/20 backdrop-blur-md rounded-2xl flex items-center justify-center shadow-lg border border-white/30">
                  <FaBalanceScale className="text-white text-xl" />
                </div>
                <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-green-400 rounded-full border-2 border-white flex items-center justify-center">
                  <div className="w-2 h-2 bg-green-300 rounded-full animate-pulse"></div>
                </div>
              </div>
              <div>
                <h3 className="font-bold text-white text-xl tracking-wide">
                  SmartLaw AI
                </h3>
                <p className="text-sm text-white/90 flex items-center gap-2 mt-1">
                  T∆∞ v·∫•n ph√°p lu·∫≠t 24/7
                </p>
              </div>
            </div>
            {onClose && (
              <button
                className="p-3 rounded-2xl hover:bg-white/20 transition-all duration-300 backdrop-blur-sm border border-white/20"
                onClick={onClose}
                aria-label="ƒê√≥ng chat bot"
              >
                <FaTimes className="text-white text-lg" />
              </button>
            )}
          </div>
        </div>

        <div
          ref={chatContainerRef}
          className="flex-1 overflow-y-auto px-6 pb-3 space-y-4 bg-gradient-to-br from-gray-50 via-white to-indigo-50/20 cursor-text"
          style={{
            scrollbarWidth: 'thin',
            scrollbarColor: '#e5e7eb transparent',
          }}
          onClick={handleChatContainerClick}
        >
          {showQuickOptions && (
            <div className="mb-8 animate-fade-in">
              <div className="grid grid-cols-2 gap-3 mt-5">
                {quickOptions.map((option, idx) => (
                  <button
                    key={idx}
                    onClick={() => handleQuickOption(option)}
                    className={`p-4 rounded-2xl border-2 transition-all duration-300 transform hover:scale-105 hover:shadow-md flex items-center gap-3 ${option.color}`}
                  >
                    <option.icon className="text-lg" />
                    <span className="text-sm font-medium">{option.text}</span>
                  </button>
                ))}
              </div>
            </div>
          )}

          {messages.map((item, index) => {
            if (item.type === 'date') {
              return (
                <div key={index} className="flex justify-center my-6">
                  <div className="bg-white/80 backdrop-blur-sm px-4 py-1 rounded-full shadow-sm border border-gray-200">
                    <span className="text-xs text-gray-600 font-medium">
                      {item.date}
                    </span>
                  </div>
                </div>
              );
            }

            const hasUsageLimit = item?.text?.includes('S·ªë l∆∞·ª£t c√≤n l·∫°i');
            let mainMessage = item?.text;
            // l∆∞u ph·∫ßn text li√™n quan ƒë·∫øn "S·ªë l∆∞·ª£t c√≤n l·∫°i"
            let usageLimitText = '';

            if (hasUsageLimit) {
              const parts = item.text.split('(S·ªë l∆∞·ª£t c√≤n l·∫°i');
              mainMessage = parts[0].trim();

              if (parts[1]) {
                usageLimitText = '(S·ªë l∆∞·ª£t c√≤n l·∫°i' + parts[1];
              }
            }
            return (
              <div
                key={index}
                className={`flex items-start gap-3 mt-5 ${
                  item.sender === 'me' ? 'flex-row-reverse' : ''
                } group`}
              >
                <div
                  className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center shadow-md ${
                    item.sender === 'me' ? 'bg-gray-600' : 'bg-blue-600'
                  }`}
                >
                  {item.sender === 'me' ? (
                    <FaUser className="text-white text-sm" />
                  ) : (
                    <FaBalanceScale className="text-white text-sm" />
                  )}
                </div>

                <div
                  className={`max-w-[75%] ${item.sender === 'me' ? 'text-right' : ''}`}
                >
                  <div
                    className={`px-4 py-3 rounded-2xl shadow-sm transition-all duration-300 group-hover:shadow-md ${
                      item.sender === 'me'
                        ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-tr-md'
                        : 'bg-white border border-gray-200 text-gray-800 rounded-tl-md'
                    }`}
                  >
                    <p className="text-sm leading-relaxed break-words whitespace-pre-wrap">
                      {formatMarkdown(mainMessage)}
                    </p>
                    {/* Thay n√∫t loa ·ªü m·ªói tin nh·∫Øn bot b·∫±ng n√∫t g·ªçi speakWithViettel */}
                    {item.sender === 'other' && (
                      <div className="mt-2 flex gap-2 items-center">
                        {/* Ch·ªâ hi·ªÉn th·ªã n√∫t "D·ª´ng ƒë·ªçc" cho tin nh·∫Øn ƒëang ƒë∆∞·ª£c ph√°t */}
                        {audioUrl && isPlaying && currentPlayingMessageText === mainMessage ? (
                          <button
                            className="flex items-center gap-1 text-red-500 hover:text-red-700 focus:outline-none text-xs"
                            title="D·ª´ng ƒë·ªçc"
                            onClick={handleStopAudio}
                            type="button"
                          >
                            <svg className="inline-block mr-1" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><rect width="12" height="12" x="2" y="2" rx="2"/></svg> D·ª´ng ƒë·ªçc
                          </button>
                        ) : (
                          <button
                            className="flex items-center gap-1 text-blue-500 hover:text-blue-700 focus:outline-none text-xs"
                            title="ƒê·ªçc n·ªôi dung tr·∫£ l·ªùi"
                            onClick={() => speakWithViettelTTS(mainMessage)}
                            type="button"
                          >
                            <FaVolumeUp className="inline-block mr-1" /> Nghe tr·∫£ l·ªùi
                          </button>
                        )}
                        {/* Audio ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi Viettel AI TTS */}
                      </div>
                    )}
                  </div>
                  <div
                    className={`text-xs text-gray-500 mt-1 px-2 ${
                      item.sender === 'me' ? 'text-right' : ''
                    }`}
                  >
                    {item.time}
                  </div>
                  {hasUsageLimit && (
                    <div
                      className={`text-xs text-gray-400 mt-1 px-2 ${
                        item.sender === 'me' ? 'text-right' : ''
                      }`}
                    >
                      <span className="opacity-70 italic">
                        {usageLimitText}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            );
          })}

          {isTyping && (
            <div className="flex items-start gap-3 animate-fade-in">
              <div className="flex-shrink-0 w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center shadow-md">
                <FaBalanceScale className="text-white text-sm" />
              </div>
              <div className="bg-white border border-gray-200 rounded-2xl rounded-tl-md px-4 py-3 shadow-sm">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                  <div
                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: '0.1s' }}
                  ></div>
                  <div
                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: '0.2s' }}
                  ></div>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="p-6 bg-white/80 backdrop-blur-sm border-t border-gray-100">
          <div className="flex gap-3 items-center bg-white rounded-2xl p-2 shadow-lg border border-gray-200 hover:shadow-xl transition-shadow">
            <div className="relative group">
              <button
                className={`w-11 h-11 flex items-center justify-center rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-offset-1
      ${
        isListening
          ? 'bg-red-500 text-white shadow-lg scale-105 animate-pulse'
          : isVoiceChatMode
          ? 'bg-green-500 text-white shadow-lg scale-105'
          : 'bg-gray-100 text-gray-600 hover:bg-blue-50 hover:text-blue-600 hover:scale-105'
      }
      ${isLoading ? 'opacity-50 cursor-not-allowed' : 'shadow-sm hover:shadow-md'}`}
                onClick={handleVoiceClick}
                type="button"
                aria-label={
                  isListening 
                    ? 'D·ª´ng ghi √¢m' 
                    : isVoiceChatMode 
                    ? 'Voice Chat ƒëang x·ª≠ l√Ω...' 
                    : 'Ghi √¢m gi·ªçng n√≥i'
                }
                disabled={isLoading}
                title={
                  isListening 
                    ? 'Nh·∫•n ƒë·ªÉ d·ª´ng ghi √¢m' 
                    : isVoiceChatMode 
                    ? 'Voice Chat: ƒêang g·ª≠i v√† ph√°t audio...' 
                    : 'Nh·∫•n ƒë·ªÉ ghi √¢m (Voice Chat: t·ª± ƒë·ªông g·ª≠i & ph√°t)'
                }
              >
                {isListening ? (
                  <svg
                    className="w-5 h-5"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : isVoiceChatMode ? (
                  // Icon cho Voice Chat mode (ƒëang x·ª≠ l√Ω)
                  <svg className="w-5 h-5 animate-spin" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M4 2a2 2 0 00-2 2v11a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H4zm3 8a1 1 0 011-1h4a1 1 0 110 2H8a1 1 0 01-1-1z" clipRule="evenodd" />
                  </svg>
                ) : (
                  <svg
                    className="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"
                    />
                  </svg>
                )}
              </button>

              {isListening && (
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-400 rounded-full border-2 border-white animate-ping"></div>
              )}
              
              {isVoiceChatMode && !isListening && (
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white animate-pulse"></div>
              )}
            </div>
            <textarea
              ref={textareaRef}
              className="flex-1 bg-transparent resize-none outline-none text-sm text-gray-700 placeholder-gray-500 leading-relaxed"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyPress}
              placeholder="Nh·∫≠p c√¢u h·ªèi ph√°p lu·∫≠t c·ªßa b·∫°n..."
              rows="1"
              style={{ minHeight: '24px', maxHeight: '120px' }}
              disabled={isLoading}
              autoFocus
            />
            <button
              className={`p-3 rounded-2xl transition-all duration-300 ${
                input.trim() && !isLoading
                  ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white hover:shadow-lg hover:scale-105'
                  : 'bg-gray-200 text-gray-500 cursor-not-allowed'
              }`}
              onClick={() => handleSend()}
              disabled={!input.trim() || isLoading}
              type="button"
            >
              {isLoading ? (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              ) : (
                <FaPaperPlane className="text-sm" />
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatBot;
